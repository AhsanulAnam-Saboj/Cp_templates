// Template owner youKnowWho
// Problem: https://www.spoj.com/problems/NHAY/
#include<bits/stdc++.h>
using namespace std;

const int N = 1e6 + 3;
// BigMod
int power(long long base, long long k, const int mod) {
  int ans = 1 % mod;
  base %= mod;
  if (base < 0) base += mod;
  while (k) {
    if (k & 1) ans = (long long) ans * base % mod;
    base = (long long) base * base % mod;
    k >>= 1;
  }
  return ans;
}
const int MOD1 = 127657753, MOD2 = 987654319;
const int p1 = 151, p2 = 269;
int ip1, ip2;
pair<int, int> pw[N], inpw[N];
// Pre calculation of Power & Inverse power
void prec() {
  pw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    pw[i].first = 1LL * pw[i - 1].first * p1 % MOD1;
    pw[i].second = 1LL * pw[i - 1].second * p2 % MOD2;
  }
  ip1 = power(p1, MOD1 - 2, MOD1);
  ip2 = power(p2, MOD2 - 2, MOD2);
  inpw[0] =  {1, 1};
  for (int i = 1; i < N; i++) {
    inpw[i].first = 1LL * inpw[i - 1].first * ip1 % MOD1;
    inpw[i].second = 1LL * inpw[i - 1].second * ip2 % MOD2;
  }
}
// Calculating Hash value
struct Hashing {

    //public:
  int n;
  string s; // 0 - indexed
  vector<pair<int, int>> hs; // 1 - indexed
  Hashing() {}
  Hashing(string _s) {
    n = _s.size();
    s = _s;
    hs.emplace_back(0, 0);
    for (int i = 0; i < n; i++) {
      pair<int, int> p;
      p.first = (hs[i].first + 1LL * pw[i].first * s[i] % MOD1) % MOD1;
      p.second = (hs[i].second + 1LL * pw[i].second * s[i] % MOD2) % MOD2;
      hs.push_back(p);
    }
  }
  pair<int, int> get_hash(int l, int r) { // 1 - indexed
    //assert(1 <= l && l <= r && r <= n);
    pair<int, int> ans;
    ans.first = (hs[r].first - hs[l - 1].first + MOD1) * 1LL * inpw[l - 1].first % MOD1;
    ans.second = (hs[r].second - hs[l - 1].second + MOD2) * 1LL * inpw[l - 1].second % MOD2;
    return ans;
  }
  pair<int, int> get_hash() {
    return get_hash(1, n);
  }
};
//bool ok(long long a, long long b, auto hash1, auto hash2){
//        auto c = hash1.get_hash(a,b);
//        a--;
//        auto d = hash2.get_hash(a, b);
//        return c==d;
//}
int main(){
    prec();
    string s;
    cin>>s;
    int n = s.size();
    Hashing hash1(s);
    string ss=s;
    reverse(ss.begin(), ss.end());
    Hashing hash2(ss);

    for(int i=0;i<=s.size();i++){

            cout<<hash1.hs[i].first<<endl;
    }
    long long ans = 1, l, r;
    for(int i=1;i<=n; i++)
    {

        if(s[i-1]==s[i])
        {
            int lo=i+1, hi=n+1, mid;
            while(hi>lo+1)
            {
                mid = (hi+lo)/2;
                int ok=0;
                auto c = hash1.get_hash(i+1,mid);
                int k = i-(mid-i)+1;
                if(k<=0) {hi=mid; continue;}
                auto d = hash2.get_hash(n-i+1,n-k+1);
                if(c==d) lo=mid;
                else hi=mid;
            }
            long long temp = (lo-i)*2;
            if(temp>ans){
                l=i-temp/2+1;
                r = i+temp/2;
                ans = temp;
            }
        }

            long long lo=i, hi=n+1, mid;
            while(hi>lo+1)
            {
                mid = (hi+lo)/2;
                auto c = hash1.get_hash(i,mid);
                int k = i-(mid-i);
                if(k<=0) {hi=mid;continue;}
                auto d = hash2.get_hash(n-i+1,n-k+1);
                if(c==d) {lo=mid; }
                else hi=mid;
            }
            long long temp = (lo-i)*2+1;
            if(temp>ans){
                l=i-temp/2;
                r = i+temp/2;
                ans = temp;
            }

    }
//    if(hash1.get_hash(3, 6)==hash2.get_hash(2, 5)) cout<<"Yes"<<endl;
//    cout<<ans<<endl;
    if(n==2 && s[0]==s[1]) {cout<<s;}
    else if(ans==1) cout<<s[0];
    else for(int i=l-1;i<r; i++) cout<<s[i];
    cout<<'\n';
//    cout<<hash1.get_hash(4, 6).first<<' '<<hash1.get_hash(4, 6).second<<endl;
//    cout<<hash2.get_hash(2, 4).first<<' '<<hash2.get_hash(2, 4).second<<endl;
}
// abcdeedhijkl
// abcdedhijkl
