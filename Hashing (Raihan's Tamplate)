/*______________________________________________Bismillahir Rahmanir Rahim____________________________________________


            .----------------.  .----------------.  .----------------.  .----------------.  .----------------.
|            | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |    |
|            | |    _______   | || |      __      | || |   ______     | || |     ____     | || |     _____    | |    |
|            | |   /  ___  |  | || |     /  \     | || |  |_   _ \    | || |   .'    `.   | || |    |_   _|   | |    |
|            | |  |  (__ \_|  | || |    / /\ \    | || |    | |_) |   | || |  /  .--.  \  | || |      | |     | |    |
|            | |   '.___`-.   | || |   / ____ \   | || |    |  __'.   | || |  | |    | |  | || |   _  | |     | |    |
|            | |  |`\____) |  | || | _/ /    \ \_ | || |   _| |__) |  | || |  \  `--'  /  | || |  | |_' |     | |    |
|            | |  |_______.'  | || ||____|  |____|| || |  |_______/   | || |   `.____.'   | || |  `.___.'     | |    |
|            | |              | || |              | || |              | || |              | || |              | |    |
|            | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |    |
|            |'----------------'  '----------------'  '----------------'  '----------------'  '----------------'|    |
|                                                                                                                    |
|                                              Ahsanul Anam Saboj
|                                              Department of CSE
|                                              Comilla University                                                    |
|                                              Email : ahsanulanamsaboj1999@gmail.com                                |
|                         _____________________Something is going to be happened ___________________                   |
|___________________________________________________________________________________________________________________*/
#include<bits/stdc++.h>
using namespace std;
#define Start_by_the_grace_of_allah        int main()
#define next_Time_INsha_AllAH               return 0;
#define ll                      long long int
#define ll                      long long int
#define ld                      long double
#define mod                     1000000007
#define test                    int tt;cin>>tt;while(tt--)
#define YES                     cout<<"YES"<<endl
#define NO                      cout<<"NO"<<endl
#define olta(a)                 reverse(a.begin(),a.end())
#define ff                      first
#define ss                      second
#define pb(x)                   push_back(x)
#define mp(x,y)                 make_pair(x,y)
#define vin                     vector<int>
#define vll                     vector<long long>
#define vp                      vector<pair<ll, ll> >
#define pll                     pair<ll,ll>
#define pii                     pair<int,int>
#define v_min(a)                *min_element(a.begin(),a.end())
#define v_max(a)                *max_element(a.begin(),a.end())
#define v_mini(v)               min_element(v.begin(),v.end()) - v.begin();
#define v_maxi(v)               max_element(v.begin(),v.end()) - v.begin();
#define v_sum(a)                accumulate(a.begin(),a.end(),0)
#define un(a)                   a.erase(unique(a.begin(),a.end()),a.end())
#define delete(a)               a.erase(a.begin(),a.end())
#define Sort(a)                 sort(a.begin(),a.end())
#define is(a)                   is_sorted(a.begin(),a.end())
#define Saboj4632               ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define gcd(a,b)                __gcd(a,b)
#define lcm(a,b)                ((a)*(b))/gcd(a,b)
#define pi                      3.141592653589793
#define md                      1000000050
#define ull                     unsigned ll
#define coutv(v)                for(auto it:v){cout<<it<<' ';}cout<<endl;
#define cinv(v)                 for(auto &it:v)cin>>it;
#define fr(in,out)              for(ll i=in;i<out;i++)
#define nl                      '\n'

const int N                     = (int)1e6 + 7;
#define INF                     1e11
//vector<ll>prime;
//bool mark[1000003];
//void sieve(ll n){ll i,j;mark[1]=1;for(i=4; i<=n; i+=2)mark[i]=1;prime.push_back(2);for(i=3; i<=n; i+=2){if(!mark[i]){prime.push_back(i);if(i*i<=n){for(j=i*i; j<=n; j+=(i*2))mark[j]=1;}}}}
//map<ll,ll>Factor;
//void Primefactorize(ll n){for(ll i=0; i<prime.size() && prime[i]*prime[i]<=n; i++){if(n%prime[i] == 0){while(n%prime[i] == 0){Factor[prime[i]]++;n/=prime[i];}}}if(n>1){Factor[n]++;}}
//(to print without sieve)--// void primeFactors(ll n){while (n % 2 == 0){cout << 2 << " ";n = n/2;}for (ll i = 3; i <= sqrt(n); i = i + 2){while (n % i == 0){cout << i << " ";n = n/i;}}if (n > 2)cout << n << " ";}
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//ll LIS(vector<ll> const& v){ll n = v.size();const ll INF = 1e10;vecl gdp(n+1,INF);gdp[0] = -INF;for(ll i=0;i<n;i++){ll l = upper_bound(gdp.begin(),gdp.end(),v[i])-gdp.begin();if(gdp[l-1]<v[i] && v[i]<gdp[l]){gdp[l] = v[i];}}for(ll i=n;i>=0;i--){if(gdp[i]<INF){n = i;break;}}return n;}

///----------------Hasing Part------------------------------------////
const pll MOD = mp(1088888881, 1481481481); ///Should be large primes
const ll base = 347;            ///Should be a prime larger than highest value
//const int N = 1e6 + 7;          ///Highest length of string


pll operator+ (pll a, pll x)
{
    return mp(a.ff + x.ff, a.ss + x.ss);
}
pll operator- (pll a, pll x)
{
    return mp(a.ff - x.ff, a.ss - x.ss);
}
pll operator* (pll a, pll x)
{
    return mp(a.ff * x.ff, a.ss * x.ss);
}
pll operator% (pll a, pll m)
{
    return mp(a.ff % m.ff, a.ss % m.ss);
}
ostream& operator<<(ostream& os, pll hash)
{
    return os << "(" << hash.ff << ", " << hash.ss << ")";
}
pll operator+ (pll a, ll x)
{
    return mp(a.ff + x, a.ss + x);
}
pll operator- (pll a, ll x)
{
    return mp(a.ff - x, a.ss - x);
}
pll operator* (pll a, ll x)
{
    return mp(a.ff * x, a.ss * x);
}


pll power (pll a, ll p)
{
    if (p == 0)   return mp(1, 1);
    pll ans = power(a, p / 2);
    ans = (ans * ans) % MOD;
    if (p % 2)    ans = (ans * a) % MOD;
    return ans;
}

///Magic!!!!!!!
pll inverse(pll a)
{
    return power(a, (MOD.ff - 1) * (MOD.ss - 1) - 1);
}

pll power_base[N];      ///powers of base mod M
pll invb;

///Call pre before everything
void hashPre()
{
    power_base[0] = mp(1, 1);
    for (int i = 1; i < N; i++)
        power_base[i] = (power_base[i - 1] * base) % MOD;
    invb = inverse(power_base[1]);
}

///Calculates Hash of a string
pll string_hash (string s)
{
    pll ans = mp(0, 0);
    for (int i = 0; i < s.size(); i++)
        ans = (ans * base + s[i]) % MOD;
    return ans;
}

///appends c to string
pll postadd (pll cur, char c)
{
    return (cur * base + c) % MOD;
}

///prepends c to string with size k
pll preadd (pll cur, ll k, char c)
{
    return (power_base[k] * c + cur) % MOD;
}

///replaces the i-th (0-indexed) character from right from a to b;
pll replace(pll cur, int i, char a, char b)
{
    cur = (cur + power_base[i] * (b - a)) % MOD;
    return (cur + MOD) % MOD;
}

///Erases c from the back of the string
pll pop_back(pll hash, char c)
{
    return (((hash - c) * invb) % MOD + MOD) % MOD;
}

///Erases c from front of the string with size len
pll pop_front(pll hash, int len, char c)
{
    return ((hash - power_base[len - 1] * c) % MOD + MOD) % MOD;
}

///concatenates two strings where length of the right is k
pll concat(pll left, pll right, int k)
{
    return (left * power_base[k] + right) % MOD;
}

///Calculates hash of string with size len repeated cnt times
///This is O(log n). For O(1), pre-calculate inverses
pll repeat(pll hash, int len, ll cnt)
{
    pll mul = (power_base[len * cnt] - 1) * inverse(power_base[len] - 1);
    mul = (mul % MOD + MOD) % MOD;
    pll ans = (hash * mul) % MOD;

    if (power_base[len].ff == 1)    ans.ff = hash.ff * cnt;
    if (power_base[len].ss == 1)    ans.ss = hash.ss * cnt;
    return ans;
}

///Calculates hashes of all prefixes of s including empty prefix
vector<pll> hashList(string &s)
{
    int n = s.size();
    vector<pll> ans(n + 1);
    ans[0] = mp(0, 0);

    for (int i = 1; i <= n; i++)
        ans[i] = (ans[i - 1] * base + s[i - 1]) % MOD;
    return ans;
}

///Calculates hash of substring s[l..r] (1 indexed)
pll substringHash(const vector<pll> &hashlist, ll l, ll r)
{
    ll len = (r - l + 1);
    return ((hashlist[r] - hashlist[l - 1] * power_base[len]) % MOD + MOD) % MOD;
}

void akam()
{
    ll n,i,j,c=0,x,y,k,ans=0,sum=0;

    //cout<<"Case "<<tst<<": ";

    string s;
    cin>>s;

    vp  ha = hashList(s);

    n = s.size();

    for(i=1;i<n;i++){

        x = i;
        y = n - x +1;

        if(substringHash(ha,1,x) == substringHash(ha,y,n) and y<=x ){

            //cout<<x<< " "<<y<<endl;
            YES;
            cout<<s.substr(0,x)<<endl;
            return;
        }

    }
    NO;



}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    ll tst =0;
    hashPre();
    //test
    akam();

    return 0;

}
