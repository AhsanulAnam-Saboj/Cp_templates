

/** Bismillah Hir Rahman Nir Raheem **/
/**
Simple Library for String Hashing
Uses Rolling Double Hash.
Hash(abc........z) = a*p^n + b*p^(n-1) + ...... + z
Cautions:
1.  You may assign any integer values to characters.
    Common is 'a' = 1, 'b' = 2 ..........
    Here the ascii values of characters is used.
    But never assign any character the value 0.
    For example if 'a' = 0; 'abc' and 'bc' has the same hash.
2.  Single Hashing with an unusual mod is often enough,
    but will surely fail for good enough judge-data.
    In order to convert to Single Hash -
        o Delete operator overloads (optional)
        o Replace all PLL with LL
        o Change mp pairs to appropriate value
Some Primes:
1000000007, 1000000009, 1000000861, 1000099999      ( < 2^30 )
1088888881, 1111211111, 1500000001, 1481481481      ( < 2^31 )
2147483647 (2^31-1),
**/

#include <bits/stdc++.h>
#define ff first
#define ss second
#define mp make_pair
#define   ll              long long int
#define   ull             unsigned long long int
#define   tst             int t;cin>>t;while(t--)
#define   pb              push_back
#define   vc              vector
#define   vs              vc<string>
#define   vi              vc<int>
#define   vl              vc<ll>
#define   pii             pair<int,int>
#define   pll             pair<ll,ll>
#define   F               first
#define   S               second
#define   PI              2*acos(0.0)
#define   rsrt(v)         sort(v.rbegin(),v.rend());
#define   all(v)          v.begin(),v.end()
#define   pf(x)           cout<<x<<endl;
#define   yes             cout<<"YES"<<endl;
#define   no              cout<<"NO"<<endl;
#define   ms(x,n)         memset(x,n,sizeof(x));
#define   srt(v)          sort(v.begin(),v.end());
#define   rvs(v)          reverse(v.begin(),v.end());
#define   gcd(a,b)        __gcd(a,b)
#define   lcm(a,b)        (a/gcd(a,b))*b
#define   cs(x)           cout<<"Case "<<x<<": ";
#define   coutv(v)        for(auto it:v)cout<<it<<' ';cout<<endl;
#define   cinv(v)         for(auto &it:v)cin>>it;
#define   mod             1000000007
#define cs(x) cout<<"Case "<<x<<": ";
using namespace std;
typedef long long LL;
typedef pair<LL, LL> PLL;


///const int fx[] = {+1,-1,+0,+0};
///const int fy[] = {+0,+0,+1,-1};
///const int fx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///king's move
///const int fy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; ///king's move
///const int fx[] = {-2,-2,-1,-1,+1,+1,+2,+2}; ///knight's move
///const int fy[] = {-1,+1,-2,+2,-2,+2,-1,+1}; ///knight's move
///=============== Debugging ============================///
void __print(int x) {cout << x;}
void __print(long x) {cout << x;}
void __print(long long x) {cout << x;}
void __print(unsigned x) {cout << x;}
void __print(unsigned long x) {cout << x;}
void __print(unsigned long long x) {cout << x;}
void __print(float x) {cout << x;}
void __print(double x) {cout << x;}
void __print(long double x) {cout << x;}
void __print(char x) {cout << '\'' << x << '\'';}
void __print(const char *x) {cout << '\"' << x << '\"';}
void __print(const string &x) {cout << '\"' << x << '\"';}
void __print(bool x) {cout << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cout << '{'; __print(x.first); cout << ','; __print(x.second); cout << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cout << '{'; for (auto &i : x) cout << (f++ ? "," : ""), __print(i); cout << "}";}
void _print() {cout << "]\n";}
template <typename T, typename... V>
void print(T t, V... v) {_print(t); if (sizeof...(v)) cout << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cout << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif
///=============================================///


const PLL M = mp(1088888881, 1481481481); ///Should be large primes
const LL base = 347;            ///Should be a prime larger than highest value
const int N = 1e6 + 7;          ///Highest length of string

ostream& operator<<(ostream& os, PLL hash)
{
    return os << "(" << hash.ff << ", " << hash.ss << ")";
}

PLL operator+ (PLL a, LL x)
{
    return mp(a.ff + x, a.ss + x);
}
PLL operator- (PLL a, LL x)
{
    return mp(a.ff - x, a.ss - x);
}
PLL operator* (PLL a, LL x)
{
    return mp(a.ff * x, a.ss * x);
}
PLL operator+ (PLL a, PLL x)
{
    return mp(a.ff + x.ff, a.ss + x.ss);
}
PLL operator- (PLL a, PLL x)
{
    return mp(a.ff - x.ff, a.ss - x.ss);
}
PLL operator* (PLL a, PLL x)
{
    return mp(a.ff * x.ff, a.ss * x.ss);
}
PLL operator% (PLL a, PLL m)
{
    return mp(a.ff % m.ff, a.ss % m.ss);
}

PLL power (PLL a, LL p)
{
    if (p == 0)   return mp(1, 1);
    PLL ans = power(a, p / 2);
    ans = (ans * ans) % M;
    if (p % 2)    ans = (ans * a) % M;
    return ans;
}

///Magic!!!!!!!
PLL inverse(PLL a)
{
    return power(a, (M.ff - 1) * (M.ss - 1) - 1);
}

PLL pb[N];      ///powers of base mod M
PLL invb;

///Call pre before everything
void hashPre()
{
    pb[0] = mp(1, 1);
    for (int i = 1; i < N; i++)
        pb[i] = (pb[i - 1] * base) % M;
    invb = inverse(pb[1]);
}

///Calculates Hash of a string
PLL Hash (string s)
{
    PLL ans = mp(0, 0);
    for (int i = 0; i < s.size(); i++)
        ans = (ans * base + s[i]) % M;
    return ans;
}

///appends c to string
PLL append(PLL cur, char c)
{
    return (cur * base + c) % M;
}

///prepends c to string with size k
PLL prepend(PLL cur, int k, char c)
{
    return (pb[k] * c + cur) % M;
}

///replaces the i-th (0-indexed) character from right from a to b;
PLL replace(PLL cur, int i, char a, char b)
{
    cur = (cur + pb[i] * (b - a)) % M;
    return (cur + M) % M;
}

///Erases c from the back of the string
PLL pop_back(PLL hash, char c)
{
    return (((hash - c) * invb) % M + M) % M;
}

///Erases c from front of the string with size len
PLL pop_front(PLL hash, int len, char c)
{
    return ((hash - pb[len - 1] * c) % M + M) % M;
}

///concatenates two strings where length of the right is k
PLL concat(PLL left, PLL right, int k)
{
    return (left * pb[k] + right) % M;
}

///Calculates hash of string with size len repeated cnt times
///This is O(log n). For O(1), pre-calculate inverses
PLL repeat(PLL hash, int len, LL cnt)
{
    PLL mul = (pb[len * cnt] - 1) * inverse(pb[len] - 1);
    mul = (mul % M + M) % M;
    PLL ans = (hash * mul) % M;

    if (pb[len].ff == 1)    ans.ff = hash.ff * cnt;
    if (pb[len].ss == 1)    ans.ss = hash.ss * cnt;
    return ans;
}

///Calculates hashes of all prefixes of s including empty prefix
vector<PLL> hashList(string &s)
{
    int n = s.size();
    vector<PLL> ans(n + 1);
    ans[0] = mp(0, 0);

    for (int i = 1; i <= n; i++)
        ans[i] = (ans[i - 1] * base + s[i - 1]) % M;
    return ans;
}

///Calculates hash of substring s[l..r] (1 indexed)
PLL substringHash(const vector<PLL> &hashlist, int l, int r)
{
    int len = (r - l + 1);
    return ((hashlist[r] - hashlist[l - 1] * pb[len]) % M + M) % M;
}

void solve()
{
    
    
    
    
}

int main()
{
    ios::sync_with_stdio(false); cin.tie(0);

    hashPre();

    int t = 1;
    cin >> t;
    while (t--)
        solve();

    return 0;
